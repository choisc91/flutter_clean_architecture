// Mocks generated by Mockito 5.1.0 from annotations
// in clean_architecture/test/data/pixabay_api_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i5;
import 'dart:convert' as _i6;
import 'dart:typed_data' as _i7;

import 'package:clean_architecture/model/photo.dart' as _i9;
import 'package:http/src/base_request.dart' as _i8;
import 'package:http/src/client.dart' as _i4;
import 'package:http/src/response.dart' as _i2;
import 'package:http/src/streamed_response.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeResponse_0 extends _i1.Fake implements _i2.Response {}

class _FakeStreamedResponse_1 extends _i1.Fake implements _i3.StreamedResponse {
}

/// A class which mocks [Client].
///
/// See the documentation for Mockito's code generation for more information.
class MockClient extends _i1.Mock implements _i4.Client {
  MockClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i2.Response> head(Uri? url, {Map<String, String>? headers}) =>
      (super.noSuchMethod(Invocation.method(#head, [url], {#headers: headers}),
              returnValue: Future<_i2.Response>.value(_FakeResponse_0()))
          as _i5.Future<_i2.Response>);
  @override
  _i5.Future<_i2.Response> get(Uri? url, {Map<String, String>? headers}) =>
      (super.noSuchMethod(Invocation.method(#get, [url], {#headers: headers}),
              returnValue: Future<_i2.Response>.value(_FakeResponse_0()))
          as _i5.Future<_i2.Response>);
  @override
  _i5.Future<_i2.Response> post(Uri? url,
          {Map<String, String>? headers,
          Object? body,
          _i6.Encoding? encoding}) =>
      (super.noSuchMethod(
              Invocation.method(#post, [url],
                  {#headers: headers, #body: body, #encoding: encoding}),
              returnValue: Future<_i2.Response>.value(_FakeResponse_0()))
          as _i5.Future<_i2.Response>);
  @override
  _i5.Future<_i2.Response> put(Uri? url,
          {Map<String, String>? headers,
          Object? body,
          _i6.Encoding? encoding}) =>
      (super.noSuchMethod(
              Invocation.method(#put, [url],
                  {#headers: headers, #body: body, #encoding: encoding}),
              returnValue: Future<_i2.Response>.value(_FakeResponse_0()))
          as _i5.Future<_i2.Response>);
  @override
  _i5.Future<_i2.Response> patch(Uri? url,
          {Map<String, String>? headers,
          Object? body,
          _i6.Encoding? encoding}) =>
      (super.noSuchMethod(
              Invocation.method(#patch, [url],
                  {#headers: headers, #body: body, #encoding: encoding}),
              returnValue: Future<_i2.Response>.value(_FakeResponse_0()))
          as _i5.Future<_i2.Response>);
  @override
  _i5.Future<_i2.Response> delete(Uri? url,
          {Map<String, String>? headers,
          Object? body,
          _i6.Encoding? encoding}) =>
      (super.noSuchMethod(
              Invocation.method(#delete, [url],
                  {#headers: headers, #body: body, #encoding: encoding}),
              returnValue: Future<_i2.Response>.value(_FakeResponse_0()))
          as _i5.Future<_i2.Response>);
  @override
  _i5.Future<String> read(Uri? url, {Map<String, String>? headers}) =>
      (super.noSuchMethod(Invocation.method(#read, [url], {#headers: headers}),
          returnValue: Future<String>.value('')) as _i5.Future<String>);
  @override
  _i5.Future<_i7.Uint8List> readBytes(Uri? url,
          {Map<String, String>? headers}) =>
      (super.noSuchMethod(
              Invocation.method(#readBytes, [url], {#headers: headers}),
              returnValue: Future<_i7.Uint8List>.value(_i7.Uint8List(0)))
          as _i5.Future<_i7.Uint8List>);
  @override
  _i5.Future<_i3.StreamedResponse> send(_i8.BaseRequest? request) =>
      (super.noSuchMethod(Invocation.method(#send, [request]),
              returnValue:
                  Future<_i3.StreamedResponse>.value(_FakeStreamedResponse_1()))
          as _i5.Future<_i3.StreamedResponse>);
  @override
  void close() => super.noSuchMethod(Invocation.method(#close, []),
      returnValueForMissingStub: null);
}

/// A class which mocks [Photo].
///
/// See the documentation for Mockito's code generation for more information.
class MockPhoto extends _i1.Mock implements _i9.Photo {
  MockPhoto() {
    _i1.throwOnMissingStub(this);
  }

  @override
  int get id =>
      (super.noSuchMethod(Invocation.getter(#id), returnValue: 0) as int);
  @override
  set id(int? _id) => super.noSuchMethod(Invocation.setter(#id, _id),
      returnValueForMissingStub: null);
  @override
  String get pageURL =>
      (super.noSuchMethod(Invocation.getter(#pageURL), returnValue: '')
          as String);
  @override
  set pageURL(String? _pageURL) =>
      super.noSuchMethod(Invocation.setter(#pageURL, _pageURL),
          returnValueForMissingStub: null);
  @override
  String get type =>
      (super.noSuchMethod(Invocation.getter(#type), returnValue: '') as String);
  @override
  set type(String? _type) => super.noSuchMethod(Invocation.setter(#type, _type),
      returnValueForMissingStub: null);
  @override
  String get tags =>
      (super.noSuchMethod(Invocation.getter(#tags), returnValue: '') as String);
  @override
  set tags(String? _tags) => super.noSuchMethod(Invocation.setter(#tags, _tags),
      returnValueForMissingStub: null);
  @override
  String get previewURL =>
      (super.noSuchMethod(Invocation.getter(#previewURL), returnValue: '')
          as String);
  @override
  set previewURL(String? _previewURL) =>
      super.noSuchMethod(Invocation.setter(#previewURL, _previewURL),
          returnValueForMissingStub: null);
  @override
  int get previewWidth =>
      (super.noSuchMethod(Invocation.getter(#previewWidth), returnValue: 0)
          as int);
  @override
  set previewWidth(int? _previewWidth) =>
      super.noSuchMethod(Invocation.setter(#previewWidth, _previewWidth),
          returnValueForMissingStub: null);
  @override
  int get previewHeight =>
      (super.noSuchMethod(Invocation.getter(#previewHeight), returnValue: 0)
          as int);
  @override
  set previewHeight(int? _previewHeight) =>
      super.noSuchMethod(Invocation.setter(#previewHeight, _previewHeight),
          returnValueForMissingStub: null);
  @override
  String get webformatURL =>
      (super.noSuchMethod(Invocation.getter(#webformatURL), returnValue: '')
          as String);
  @override
  set webformatURL(String? _webformatURL) =>
      super.noSuchMethod(Invocation.setter(#webformatURL, _webformatURL),
          returnValueForMissingStub: null);
  @override
  int get webformatWidth =>
      (super.noSuchMethod(Invocation.getter(#webformatWidth), returnValue: 0)
          as int);
  @override
  set webformatWidth(int? _webformatWidth) =>
      super.noSuchMethod(Invocation.setter(#webformatWidth, _webformatWidth),
          returnValueForMissingStub: null);
  @override
  int get webformatHeight =>
      (super.noSuchMethod(Invocation.getter(#webformatHeight), returnValue: 0)
          as int);
  @override
  set webformatHeight(int? _webformatHeight) =>
      super.noSuchMethod(Invocation.setter(#webformatHeight, _webformatHeight),
          returnValueForMissingStub: null);
  @override
  String get largeImageURL =>
      (super.noSuchMethod(Invocation.getter(#largeImageURL), returnValue: '')
          as String);
  @override
  set largeImageURL(String? _largeImageURL) =>
      super.noSuchMethod(Invocation.setter(#largeImageURL, _largeImageURL),
          returnValueForMissingStub: null);
  @override
  int get imageWidth =>
      (super.noSuchMethod(Invocation.getter(#imageWidth), returnValue: 0)
          as int);
  @override
  set imageWidth(int? _imageWidth) =>
      super.noSuchMethod(Invocation.setter(#imageWidth, _imageWidth),
          returnValueForMissingStub: null);
  @override
  int get imageHeight =>
      (super.noSuchMethod(Invocation.getter(#imageHeight), returnValue: 0)
          as int);
  @override
  set imageHeight(int? _imageHeight) =>
      super.noSuchMethod(Invocation.setter(#imageHeight, _imageHeight),
          returnValueForMissingStub: null);
  @override
  int get imageSize =>
      (super.noSuchMethod(Invocation.getter(#imageSize), returnValue: 0)
          as int);
  @override
  set imageSize(int? _imageSize) =>
      super.noSuchMethod(Invocation.setter(#imageSize, _imageSize),
          returnValueForMissingStub: null);
  @override
  int get views =>
      (super.noSuchMethod(Invocation.getter(#views), returnValue: 0) as int);
  @override
  set views(int? _views) =>
      super.noSuchMethod(Invocation.setter(#views, _views),
          returnValueForMissingStub: null);
  @override
  int get downloads =>
      (super.noSuchMethod(Invocation.getter(#downloads), returnValue: 0)
          as int);
  @override
  set downloads(int? _downloads) =>
      super.noSuchMethod(Invocation.setter(#downloads, _downloads),
          returnValueForMissingStub: null);
  @override
  int get collections =>
      (super.noSuchMethod(Invocation.getter(#collections), returnValue: 0)
          as int);
  @override
  set collections(int? _collections) =>
      super.noSuchMethod(Invocation.setter(#collections, _collections),
          returnValueForMissingStub: null);
  @override
  int get likes =>
      (super.noSuchMethod(Invocation.getter(#likes), returnValue: 0) as int);
  @override
  set likes(int? _likes) =>
      super.noSuchMethod(Invocation.setter(#likes, _likes),
          returnValueForMissingStub: null);
  @override
  int get comments =>
      (super.noSuchMethod(Invocation.getter(#comments), returnValue: 0) as int);
  @override
  set comments(int? _comments) =>
      super.noSuchMethod(Invocation.setter(#comments, _comments),
          returnValueForMissingStub: null);
  @override
  int get userId =>
      (super.noSuchMethod(Invocation.getter(#userId), returnValue: 0) as int);
  @override
  set userId(int? _userId) =>
      super.noSuchMethod(Invocation.setter(#userId, _userId),
          returnValueForMissingStub: null);
  @override
  String get user =>
      (super.noSuchMethod(Invocation.getter(#user), returnValue: '') as String);
  @override
  set user(String? _user) => super.noSuchMethod(Invocation.setter(#user, _user),
      returnValueForMissingStub: null);
  @override
  String get userImageURL =>
      (super.noSuchMethod(Invocation.getter(#userImageURL), returnValue: '')
          as String);
  @override
  set userImageURL(String? _userImageURL) =>
      super.noSuchMethod(Invocation.setter(#userImageURL, _userImageURL),
          returnValueForMissingStub: null);
  @override
  Map<String, dynamic> toJson() =>
      (super.noSuchMethod(Invocation.method(#toJson, []),
          returnValue: <String, dynamic>{}) as Map<String, dynamic>);
}
